
1.OIO与NIO
    NIO：
        面向缓冲区、非阻塞IO操作、有Selector

        NIO的实现是运用通道与通道的多路复用技术。NIO操作的是缓冲区，将缓冲区写入到管道中，因此可以操纵Buffer中的
        任意位置。可以有多个线程同时操作Buffer，线程发起IO请求，立即返回；内核在做好IO操作的准备之后，通过调用注册
        的回调函数通知线程做IO操作，线程开始阻塞，直到操作完成。

        WARN:
            Java1.4以上支持
            NIO中的selector需要操作系统底层（内核）实现。

    OIO：
        面向流、阻塞IO操作、没有Selector

        面向流（字节流或字符流）操作，一般的一个线程以流的方式顺序的从管道中读取对应的字节数据，在此期间不能随意
        改变指针读取位置。线程发起IO请求，不管内核是否准备好IO操作，从发起请求起，线程一直阻塞，直到操作完成。

    NIO的优势：使用选择器，系统开销小，系统不必为每一个网络连接（文件描述符）创建多个线程/进程，从而大大减小系统开销。


2.NIO的三大组件
    Channel：管道与OIO类似。OIO会涉及Input/Output两个流操作。NIO在一个合并的管道中，既可操作Input，亦可操作Output。

    NIO Buffer：通道Read-->将数据从通道读取到缓冲区中。
                通道Write-->将缓冲区的数据写入到通道中。

    Selector：一个IO事件查询器。一个线程可以查询多个通道的的IO事件的就绪状态，即一个线程可以通过Selector管理多个通道。


Selector
    选择器完成I/O的多路复用技术，一个通道代表一条连接通路，选择器可以同时监控多个通道的IO状况。选择器与通道的关系是监控与被监控

    一般的通道和选择器之间的关系可以通过管道中的register的方式完成。第一个参数指定通道注册到的选择器实例；
    第二个参数(SelectionKey)，指定选择器要监控的I/O时间类型，该类型有四种具体如下.
                        Connection(OP_CONNECTION):连接
                        ACCEPT(OP_ACCEPT):接收
                        WRITE(OP_WRITE):可写
                        READ(OP_READ):可读
        注:
            *如果需要选择器实现多种监控事件，可以用"|(按位或)"运算符来实现。
            *IO事件指的是一个状态。
            *不是所有的Channel都可以被选择器监控或选择。如果不能就不可以使用多路复用技术。判断Channel是否支持可以查看
                其是否继承了SelectableChannel，如果没有继承则不可以使用多路复用技术。典型的FileChannel没有继承。

            *注册到通道的选择器必须处于非阻塞状态(Channel默认是阻塞式的，需要关闭)，否则报错(IllegalBlockingModeException)
            *


**************************************************P52**********************************************


Other拓展

    IO多路复用技术
        指一个进程/线程可以同时监视一个或多个文件描述符(文件当前可读/写状态)(一个网络连接，系统(操作系统内核。下同)
        底层使用一个文件描述符)一旦其中一个/多个文件描述为可读/可写状态，系统就会就会通知改线程/进程。